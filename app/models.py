# app/models.py
from pydantic import BaseModel, Field, ConfigDict
from typing import Optional
from datetime import datetime
from enum import Enum

class CostFrequency(str, Enum):
    ANNUAL = "Annual"
    MONTHLY = "Monthly"
    ONE_OFF = "One-Off"
    INITIAL_INVESTMENT = "Initial Investment"

class ExpenseCategory(str, Enum):
    GARAGE = "Garage"
    TUK_MAINTENANCE = "Tuk Maintenance"
    DIESEL = "Diesel"
    FOOD = "Food"
    ELECTRICITY = "Electricity"
    OTHERS = "Others"
    INSURANCE = "Insurance"
    LICENSES = "Licenses"
    VEHICLE_PURCHASE = "Vehicle Purchase"
    MARKETING = "Marketing"

class PaymentMethod(str, Enum):
    CASH = "Cash"
    BANK_TRANSFER = "Bank Transfer"
    DEBIT_CARD = "Debit Card"

class FixedCost(BaseModel):
    """
    Represents a fixed cost entry, which can be annual, monthly, or an initial investment.
    """
    model_config = ConfigDict(from_attributes=True) # Enable ORM mode for Pydantic v2
    doc_id: Optional[int] = Field(None, description="Unique identifier for the fixed cost entry (auto-generated by the database).")
    amount_eur: float = Field(..., gt=0, description="Amount of the fixed cost in Euros.")
    description: str = Field(..., min_length=3, max_length=200, description="Description of the fixed cost.")
    cost_frequency: CostFrequency = Field(..., description="Frequency of the fixed cost (Annual, Monthly, One-Off, Initial Investment).")
    category: ExpenseCategory = Field(..., description="Category of the fixed cost.")
    recipient: Optional[str] = Field(None, max_length=100, description="Recipient of the fixed cost.")
    cost_date: str = Field(..., description="Date of the fixed cost in YYYY-MM-DD format.")
    payment_method: PaymentMethod = Field(..., description="Method of payment for the fixed cost.")
    timestamp: Optional[datetime] = Field(None, description="Timestamp of creation or last update.")

class DailyExpense(BaseModel):
    """
    Represents a daily expense entry.
    """
    model_config = ConfigDict(from_attributes=True) # Enable ORM mode for Pydantic v2
    doc_id: Optional[int] = Field(None, description="Unique identifier for the daily expense entry (auto-generated by the database).")
    amount: float = Field(..., gt=0, description="Amount of the daily expense in Euros.")
    description: str = Field(..., min_length=3, max_length=200, description="Description of the daily expense.")
    category: ExpenseCategory = Field(..., description="Category of the daily expense.")
    cost_date: str = Field(..., description="Date of the daily expense in YYYY-MM-DD format.")
    payment_method: PaymentMethod = Field(..., description="Method of payment for the daily expense.")
    timestamp: Optional[datetime] = Field(None, description="Timestamp of creation or last update.")

class Income(BaseModel):
    """
    Represents an income entry.
    """
    model_config = ConfigDict(from_attributes=True) # Enable ORM mode for Pydantic v2
    doc_id: Optional[int] = Field(None, description="Unique identifier for the income entry (auto-generated by the database).")
    income_date: str = Field(..., description="Date of the income in YYYY-MM-DD format.")
    tours_revenue_eur: float = Field(..., ge=0, description="Revenue from tours in Euros.")
    transfers_revenue_eur: float = Field(..., ge=0, description="Revenue from transfers in Euros.")
    hours_worked: float = Field(..., ge=0, description="Total hours worked for the income period.")
    timestamp: Optional[datetime] = Field(None, description="Timestamp of creation or last update.")
    # daily_total_eur is calculated on the fly for display/summary, not stored directly

class CashOnHand(BaseModel):
    """
    Represents the current cash on hand balance.
    This model expects a single entry in the database.
    """
    model_config = ConfigDict(from_attributes=True) # Enable ORM mode for Pydantic v2
    doc_id: Optional[int] = Field(None, description="Unique identifier for the cash on hand entry (auto-generated by the database).")
    balance: float = Field(..., description="Current cash on hand balance in Euros.")
    last_updated: Optional[datetime] = Field(None, description="Timestamp of the last update.")
